//https://arc079.contest.atcoder.jp/tasks/arc079_b

/* The idea is to increase k until it's divisible by 50, then create an array to satisfy that.
 * Then start doing operations until we get the original k.
 * Also, if we have an array with values X and length N
 * we need N operations to make the values (X - 1)
 */

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 2e6, MOD = 1e6 + 3, LOG = 21;

ll k, mvup, toAdd;
bool chn = false;
vector<ll> v;

int main() {
	freopen("input.txt", "r", stdin);
	scanf("%lld", &k);
	while (k % 50 != 0) {
		k++;
		mvup++;
	}
	ll N = 50;
	ll base = N - 1;
	ll needed = k / N;
	printf("%lld\n", N);
	for (int i = 0; i < N; i++) {
		v.push_back(base + needed);
	}
	toAdd = mvup;
	for (int i = 0; i < N; i++) {
		if (mvup) {
			v[i] -= N;
			mvup--;
			v[i] += (toAdd - 1);
		} else {
			v[i] += toAdd;
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%lld ", v[i]);
	}
	return 0;
}
