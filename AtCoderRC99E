/*
 * I never imagined complementing the problem can be this useful,
 * once you complement the graph and therefor the problem,
 * it's easier to solve with DP to pick the "best" coloring path
 * to minimize the roads.
 */

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 7e2 + 10, MOD = 1e9 + 7, LOG = 21;

int dp[N][N], n, res, m, fr, to, c[N], cs[N], sz, cmp[N], in[N];
bool mtrx[N][N], vis[N];
vector<vector<int> > g(N), org(N);
vector<int> items;

int DFS(int u, int p, int clr, int comp) {
	cmp[u] = comp;
	vis[u] = true;
	c[u] = clr;
	sz++;
	int cur = clr;
	for (int i = 0; i < g[u].size(); i++) {
		if (!vis[g[u][i]]) {
			cur += DFS(g[u][i], u, !clr, comp);
		} else {
			if (clr == c[g[u][i]] && p != g[u][i]) {
				printf("-1");
				exit(0);
			}
		}
	}
	return cur;
}

int calc(int ind, int sum1) {
	if (ind == items.size())
		return 0;
	int &ret = dp[ind][sum1];
	if (ret != -1)
		return ret;
	int prevNodes = cs[ind];
	int prev1 = sum1;
	int prev0 = prevNodes - prev1;
	int oneCnt1 = items[ind];
	int zeroCnt1 = cs[ind + 1] - cs[ind] - items[ind];
	int oneCnt2 = zeroCnt1;
	int zeroCnt2 = oneCnt1;

	return ret = (in[ind + 1] / 2)
			+ max(
					zeroCnt1 * prev1 + oneCnt1 * prev0
							+ calc(ind + 1, oneCnt1 + sum1),
					zeroCnt2 * prev1 + oneCnt2 * prev0
							+ calc(ind + 1, oneCnt2 + sum1));
}

int main() {
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	memset(dp, -1, sizeof(dp));
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &fr, &to);
		fr--, to--;
		mtrx[fr][to] = mtrx[to][fr] = true;
		org[fr].push_back(to);
		org[to].push_back(fr);
	}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			if (!mtrx[i][j] && i != j)
				g[i].push_back(j);
		}
	int ind = 1;
	for (int i = 0; i < n; i++) {
		if (!vis[i]) {
			res = 0;
			sz = 0;
			items.push_back(DFS(i, -1, 0, ind));
			cs[ind] = cs[ind - 1] + sz;
			ind++;
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < org[i].size(); j++) {
			if (cmp[i] == cmp[org[i][j]])
				in[cmp[i]] += (c[org[i][j]] != c[i]);
		}
	}
	cout << m - calc(0, 0);
	return 0;
}
