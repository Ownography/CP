/* The idea is to do a binary search on answer for each state
 * This obviously is TLE, therefore we use a technique called parallel binary search
 *
 * */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
const int N = 3e5 + 10, M = 51, MOD = 1e9 + 7;

int n, m, temp, q, l, r, ans[N], cnt, needs[N];
ll segTree[4 * N], lazy[4 * N];
pair<pair<int, int>, int> qa[N];
vector<vector<int> > st;
vector<vector<pair<pair<int, int>, int> > > mds;

void prop(int pos) {
	segTree[pos] += lazy[pos];
	if ((pos << 1) < 4 * N)
		lazy[(pos << 1)] += lazy[pos];
	if ((pos << 1) + 1 < 4 * N)
		lazy[(pos << 1) + 1] += lazy[pos];
	lazy[pos] = 0;
}

ll query(int pos, int l, int r, int nl, int nr) {
	if (l > r || nr > r || nl < l)
		return 0;
	prop(pos);
	if (l == nr && r == nr) {
		return segTree[pos];
	}
	int mid = (l + r) >> 1;
	return query((pos << 1), l, mid, nl, nr)
			+ query((pos << 1) + 1, mid + 1, r, nl, nr);
}

void update(int pos, int l, int r, int nl, int nr, int v) {
	if (l > r || nl > r || nr < l)
		return;
	prop(pos);
	if (l >= nl && r <= nr) {
		lazy[pos] += v;
		prop(pos);
	} else {
		int mid = (l + r) >> 1;
		update((pos << 1), l, mid, nl, nr, v);
		update((pos << 1) + 1, mid + 1, r, nl, nr, v);
	}
}

bool check(int u) {
	ll sum = 0;
	for (int i = 0; i < st[u].size(); i++) {
		sum += query(1, 0, m - 1, st[u][i], st[u][i]);
		if (sum >= needs[u])
			return true;
	}
	return false;
}

int main() {
	freopen("input.txt", "r", stdin);
	memset(ans, -1, sizeof(ans));
	scanf("%d%d", &n, &m);
	st.resize(n + 10);
	for (int i = 0; i < m; ++i) {
		scanf("%d", &temp);
		st[temp].push_back(i);
	}
	for (int i = 1; i <= n; ++i)
		scanf("%lld", needs + i);
	scanf("%d", &q);
	mds.resize(q + 10);
	for (int i = 0; i < q; ++i) {
		scanf("%d%d%lld", &l, &r, &cnt);
		--l, --r;
		qa[i] = make_pair(make_pair(l, r), cnt);
	}
	bool still = true;
	for (int i = 1; i <= n; ++i) {
		int l = 0, r = q;
		mds[(l + r) >> 1].push_back(make_pair(make_pair(l, r), i));
	}
	int mxx = q >> 1;
	while (still) {
		memset(lazy, 0, sizeof lazy);
		memset(segTree, 0, sizeof segTree);
		still = false;
		for (int i = 0; i <= mxx; ++i) {
			while (!mds[i].empty()) {
				still = true;
				pair<pair<int, int>, int> pp = mds[i].back();
				mds[i].pop_back();
				if (pp.first.first > pp.first.second) {
					continue;
				}
				int md = i;
				if (check(pp.second)) {
					ans[pp.second] = md;
					int nr = md - 1;
					int nmd = (pp.first.first + nr) >> 1;
					mds[nmd].push_back(
							make_pair(make_pair(pp.first.first, nr),
									pp.second));
				} else {
					int nl = md + 1;
					int nmd = (pp.first.second + nl) >> 1;
					mxx = max(mxx, nmd);
					mds[nmd].push_back(
							make_pair(make_pair(nl, pp.first.second),
									pp.second));
				}
			}
			if (i == q)
				continue;
			if (qa[i].first.first <= qa[i].first.second) {
				update(1, 0, m - 1, qa[i].first.first, qa[i].first.second,
						qa[i].second);
			} else {
				update(1, 0, m - 1, 0, qa[i].first.second, qa[i].second);
				update(1, 0, m - 1, qa[i].first.first, m - 1, qa[i].second);
			}
		}
	}
	for (int i = 1; i <= n; ++i) {
		if (ans[i] == -1)
			printf("NIE\n");
		else
			printf("%d\n", ans[i]);
	}
	return 0;
}
