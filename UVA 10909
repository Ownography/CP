/*
 * The idea is to simulate the proccess, the data structure needed is Treap for its log n
 * properties, and then it's a matter of "Optimization"
 */

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 2e6 + 10, MOD = 1e9 + 7, LOG = 21;

bool isLucky[N];
int res;

struct item {
	int key, prior, cnt;
	item * l, *r;
	item() {
	}
	item(int key, int prior) :
			key(key), prior(prior), l(NULL), r(NULL) {
	}
};
typedef item * pitem;

int cnt(pitem t) {
	return t ? t->cnt : 0;
}

void upd_cnt(pitem t) {
	if (t)
		t->cnt = 1 + cnt(t->l) + cnt(t->r);
}

void merge(pitem & t, pitem l, pitem r) {
	if (!l || !r)
		t = l ? l : r;
	else if (l->prior > r->prior)
		merge(l->r, l->r, r), t = l;
	else
		merge(r->l, l, r->l), t = r;
	upd_cnt(t);
}

void split(pitem t, pitem & l, pitem & r, int key, int add = 0) {
	if (!t)
		return void(l = r = 0);
	int cur_key = add + cnt(t->l); //implicit key
	if (key <= cur_key)
		split(t->l, l, t->l, key, add), r = t;
	else
		split(t->r, t->r, r, key, add + 1 + cnt(t->l)), l = t;
	upd_cnt(t);
}

void insert(pitem & root, pitem cur, int pos) {
	pitem lt, rt;
	split(root, lt, rt, pos);
	merge(lt, lt, cur);
	merge(root, lt, rt);
	upd_cnt(root);
}

void removeIndex(pitem & root, int index) {
	if (root->cnt <= index) {
		puts("Can't remove.");
		return;
	}
	if (root->l == NULL)
		if (!index) {
			merge(root, root->l, root->r);
			upd_cnt(root);
			return;
		}
//	if (root->l == NULL && root->r == NULL) {
//		merge(root, root->l, root->r);
//		upd_cnt(root);
//		return;
//	}
	if (root->l != NULL) {
		if (root->l->cnt == index) {
			merge(root, root->l, root->r);
			upd_cnt(root);
			return;

		}
		if (root->l->cnt > index) {
			removeIndex(root->l, index);
			upd_cnt(root);
			return;
		}
	} else {
		removeIndex(root->r, index - 1);
		upd_cnt(root);
		return;
	}
	if (root->r != NULL) {
		removeIndex(root->r, index - root->l->cnt - 1);
		upd_cnt(root);
	}
}

int getIth(pitem t, int ind) {
	if (t->l == NULL)
		if (!ind) {
			return t->key;
		}
	if (t->l != NULL) {
		if (cnt(t->l) == ind) {
			return t->key;
		}
		if (cnt(t->l) > ind) {
			return getIth(t->l, ind);
		}
	} else {
		return getIth(t->r, ind - 1);
	}
	if (t->r != NULL) {
		return getIth(t->r, ind - cnt(t->l) - 1);
	}
}
void output(pitem t) {
	if (!t)
		return;
	output(t->l);
	printf("%d ", t->key);
	output(t->r);
}

void sieve(pitem &root) {
	for (int i = 1; i < cnt(root); i++) {
		int v = getIth(root, i);
		for (int j = v, kk = 1; j < cnt(root); j += v, kk++) {
			removeIndex(root, j - kk);
		}
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	pitem root = new item(1, 123);
//	upd_cnt(root);
	int rnd;
	pitem toAdd;
	for (int i = 3, j = 1; i < 2000000; i += 2, j++) {
		rnd = rand() % 1000000000;
		toAdd = new item(i, rnd);
		insert(root, toAdd, j);
	}
	sieve(root);
	int x = 0;
	vector<int> v;
	for (int i = 0; i < cnt(root); i++)
		v.push_back(getIth(root, i));
	int t;
	for (int i = 0; i < v.size(); i++)
		isLucky[v[i]] = true;
	while (scanf("%d", &t) == 1) {
		if (t & 1) {
			printf("%d is not the sum of two luckies!\n", t);
			continue;
		} else {
			int stInd = lower_bound(v.begin(), v.end(), t) - v.begin();
			int diff = 1e9;
			pair<int, int> res;
			for (int i = 0; i <= stInd; i++) {
				int needed = t - v[i];
				if (isLucky[needed]) {
					if (abs(v[i] - needed) < diff) {
						diff = abs(v[i] - needed);
						res = make_pair(v[i], needed);
					} else
						break;
				}
			}
			if (diff == 1e9) {
				printf("%d is not the sum of two luckies!\n", t);
				continue;
			}
			printf("%d is the sum of %d and %d.\n", t,
					min(res.first, res.second), max(res.first, res.second));
		}
	}
	return 0;
}
