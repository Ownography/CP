/* This problem was solved using Dynamic Programming, where the state is "Which node I am on, and what state I am in"
 * and the value the DP table holds is the minimum number of black nodes we need to satisfy this subtree
 * The states are as follow
 * 0 -> I am black (all children have to be of type 1)
 * 1 -> I am white and I have a black parent (all my children have to be of type 2)
 * 2 -> I am white and I am not covered by a black parent, the answer to that is the minimum cost of
 * trying to put 1 black child and the rest white uncovered.
 * */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int N = 1e4 + 10, MOD = 998244353, LOG = 21;

int t, n, l, r;
ll dp[N][4];
vector<vector<int> > g(N);

ll calc(int ind, int state, int p) {
	ll &ret = dp[ind][state];
	if (ret != -1)
		return ret;
	if (state == 0) {
		ll sum = 0;
		for (int i = 0; i < g[ind].size(); i++) {
			if (g[ind][i] != p)
				sum += min(calc(g[ind][i], 1, ind), calc(g[ind][i], 0, ind));
		}
		return ret = sum + 1;
	} else if (state == 1) {
		ll sum = 0;
		for (int i = 0; i < g[ind].size(); i++) {
			if (g[ind][i] != p)
				sum += calc(g[ind][i], 2, ind);
		}
		return ret = sum;
	} else if (state == 2) {
		ll sum = 1e8, sumW = 0;
		for (int i = 0; i < g[ind].size(); i++) {
			if (g[ind][i] != p) {
				sumW += calc(g[ind][i], 2, ind);
			}
		}
		for (int i = 0; i < g[ind].size(); i++) {
			if (g[ind][i] != p) {
				sumW -= calc(g[ind][i], 2, ind);
				sum = min(sum, calc(g[ind][i], 0, ind) + sumW);
				sumW += calc(g[ind][i], 2, ind);
			}
		}
		return ret = sum;
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	memset(dp, -1, sizeof dp);
	while (true) {
		scanf("%d", &t);
		if (t == -1)
			return 0;
		if (t == 0) {
			memset(dp, -1, sizeof(dp));
			g.clear();
			g.resize(N);
			continue;
		}
		for (int i = 0; i < t - 1; i++) {
			scanf("%d%d", &l, &r);
			l--, r--;
			g[l].push_back(r);
			g[r].push_back(l);
		}
		printf("%lld\n", min(calc(0, 0, -1), calc(0, 2, -1)));
	}
	return 0;
}
