/* This problem can be easily solved by binary searching the answer,
 * we can binary search on the number of musicians per stand
 * and iterate over the musicians and see if the number of stands needed is larger than the number
 * of stands we have, we can't make it happen, else we can.
 * solution runs in O(n*log(n))
 * Proof of correctness:
 * If we can put x musicians per stand (we have enough stands to make this happen) then we can put x + n per stand.
 * and vise verse, if we can't put x musicians per stands because we don't have enough stands, we can't put x - n.
  */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int N = 1e5 + 10, MOD = 998244353, LOG = 21;

int n, p, a[N];

bool check(int pp) {
	int needed = 0;
	for (int i = 0; i < p; i++) {
		needed += a[i] / pp;
		if (a[i] % pp != 0)
			needed++;
	}
	if (needed > n)
		return false;
	return true;
}

int main() {
	//freopen("input.txt", "r", stdin);
	while (scanf("%d%d", &n, &p) == 2) {
		for (int i = 0; i < p; i++)
			scanf("%d", a + i);
		int l = 1, r = 1234, res = -1;
		while (l <= r) {
			int mid = (l + r) / 2;
			if (check(mid)) {
				res = mid;
				r = mid - 1;
			} else {
				l = mid + 1;
			}
		}
		printf("%d\n", res);
	}
	return 0;
}
