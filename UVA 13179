// Solution 1

/* The idea is to do a binary search on answer for each state
 * This obviously is TLE, therefore we use a technique called parallel binary search
 *
 * */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
const int N = 105, MOD = 1e9 + 7;

int r, c, cnt, xi, yi, dp[N][N][N][N];
pair<int, int> q[N];
vector<pair<pair<int, int>, pair<int, int> > > states;

int dist(int xx1, int yy1, int xx2, int yy2) {
	return abs(xx1 - xx2) + abs(yy1 - yy2);
}

int calc(int ind, int spind, int extra, int spextra) {
	extra = min(extra, 100);
	spextra = min(spextra, 100);
	states.push_back(
			make_pair(make_pair(ind, spind), make_pair(extra, spextra)));
	if (ind == cnt + 1) {
		return max(
				(dist(q[spind].first, q[spind].second, r - 1, c - 1) - spextra),
				0);
	}
	int &ret = dp[ind][spind][extra][spextra];
	if (ret != -1)
		return ret;
	int toAdd = dist(q[ind].first, q[ind].second, q[ind + 1].first,
			q[ind + 1].second);
	int toRemove = min(toAdd, extra);
	toAdd -= toRemove;
	int toAdd2 = dist(q[spind].first, q[spind].second, q[ind + 1].first,
			q[ind + 1].second);
	int toRemove2 = min(toAdd2, spextra);
	toAdd2 -= toRemove2;
	return ret = min(toAdd + calc(ind + 1, spind, 0, spextra + toAdd),
			toAdd2 + calc(ind + 1, ind, 0, extra + toAdd2));
}

int main() {
	freopen("input.txt", "r", stdin);
	memset(dp, -1, sizeof dp);
	while (scanf("%d%d", &r, &c) == 2) {
		while (!states.empty()) {
			int v1 = states.back().first.first;
			int v2 = states.back().first.second;
			int v3 = states.back().second.first;
			int v4 = states.back().second.second;
			dp[v1][v2][v3][v4] = -1;
			states.pop_back();
		}
		scanf("%d", &cnt);
		for (int i = 1; i <= cnt; i++) {
			scanf("%d%d", &q[i].first, &q[i].second);
			q[i].first--, q[i].second--;
		}
		q[cnt + 1] = make_pair(r - 1, c - 1);
		printf("%d\n", calc(0, 0, 0, 0) + 1);
	}
	return 0;
}

//Solution 2

/* The idea is to do a binary search on answer for each state
 * This obviously is TLE, therefore we use a technique called parallel binary search
 *
 * */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
const int N = 105, MOD = 1e9 + 7;

int r, c, cnt, xi, yi, dp[N][N][N];
pair<int, int> q[N];

int dist(int xx1, int yy1, int xx2, int yy2) {
	return abs(xx1 - xx2) + abs(yy1 - yy2);
}

int calc(int ind, int spind, int extra) {
	extra = min(extra, 100);
	if (ind == cnt + 1) {
		return max(
				(dist(q[spind].first, q[spind].second, r - 1, c - 1) - extra),
				0);
	}
	int &ret = dp[ind][spind][extra];
	if (ret != -1)
		return ret;
	int toAdd = dist(q[ind].first, q[ind].second, q[ind + 1].first,
			q[ind + 1].second);
	int toAdd2 = dist(q[spind].first, q[spind].second, q[ind + 1].first,
			q[ind + 1].second);
	int toRemove2 = min(toAdd2, extra);
	toAdd2 -= toRemove2;
	return ret = min(toAdd + calc(ind + 1, spind, extra + toAdd),
			toAdd2 + calc(ind + 1, ind, toAdd2));
}

int main() {
	freopen("input.txt", "r", stdin);
	while (scanf("%d%d", &r, &c) == 2) {
		memset(dp, -1, sizeof dp);
		scanf("%d", &cnt);
		for (int i = 1; i <= cnt; i++) {
			scanf("%d%d", &q[i].first, &q[i].second);
			q[i].first--, q[i].second--;
		}
		q[cnt + 1] = make_pair(r - 1, c - 1);
		printf("%d\n", calc(0, 0, 0) + 1);
	}
	return 0;
}
