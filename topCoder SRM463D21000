/*First observation is that little numbers should be summed up to go to above 3
 * any number above 3 is better multiplied
 * also given a set of numbers to add, the best pairs to pick are least with most since we will multiply them next
* also if the number of numbers we are going to add is N
* then the numbers we will add are the first N numbers given that the array is sorted
* so we just bruteforce on N
 *
 */

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 1e5 + 10, MOD = 1e9 + 7, LOG = 21;

int n;
vector<double> m, l, v;
double t, mx = -1;

double calc(int ind) {
	double ret = 1;
	for (int i = 0; i < ind / 2; i++)
		ret *= v[i] + v[ind - 1 - i];
	return ret;
}

int main() {
	freopen("input.txt", "r", stdin);
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%lf", &t);
		v.push_back(t);
	}
	sort(v.begin(), v.end());
	for (int i = 0; i <= n; i += 2)
		mx = max(mx, calc(i));
	cout << mx;
	return 0;
}
//
//// SUBMISSION!
//
#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 1e5 + 10, MOD = 1e9 + 7, LOG = 21;

int n;
vector<double> m, l, v;
double t, mx = -1;

class Nisoku {
public:
	double calc(int ind) {
		double ret = 1;
		for (int i = 0; i < ind / 2; i++)
			ret *= v[i] + v[ind - 1 - i];
		for (int i = ind; i < v.size(); i++)
			ret *= v[i];
		return ret;
	}
	double theMax(vector<double> cards) {
		for (int i = 0; i < cards.size(); i++) {
			v.push_back(cards[i]);
		}
		sort(v.begin(), v.end());
		for (int i = 0; i <= v.size(); i += 2)
			mx = max(mx, calc(i));
		return mx;
	}
};
