/*First observation is that little numbers should be summed up to go to above 3
 * any number above 3 is better multiplied
 * also given a set of numbers to add, the best pairs to pick are least with most since we will multiply them next
 * also if the number of numbers we are going to add is N
 * then the numbers we will add are the first N numbers given that the array is sorted
 * so we just bruteforce on N
 *
 */

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 50 + 10, MOD = 1e9 + 7, LOG = 21;

int n, szs, szp, cnts;
vector<string> p, s;
vector<vector<int> > can;
char c[N];
char known[N];
string ss;

void solve(int ind) {
	for (int i = 0; i < s.size(); i++) {
		for (int j = 0; j < can[i].size(); j++) {
			if (s[i][ind] != p[can[i][j]][ind]) {
				can[i].erase(can[i].begin() + j);
				j--;
			}
		}
	}
}

void solve2(int ind) {
	for (int i = 0; i < s.size(); i++) {
		bool all = true;
		for (int j = 0; j < can[i].size(); j++) {
			if (p[can[i][j]][ind] == '0') {
				all = false;
				break;
			}
		}
		if (all) {
			known[ind] = 'N';
			return;
		}
	}
}

int main() {
	freopen("input.txt", "r", stdin);
	memset(known, '?', sizeof(known));
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%s", &c);
		ss = c;
		p.push_back(ss);
	}
	szp = p.size();
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%s", &c);
		ss = c;
		s.push_back(ss);
	}
	szs = n;
	can.resize(szs);
	for (int i = 0; i < szs; i++) {
		for (int j = 0; j < szp; j++)
			can[i].push_back(j);
	}
	cnts = s[0].size();
	for (int i = 0; i < cnts; i++) {
		for (int j = 0; j < s.size(); j++) {
			if (s[j][i] == '1') {
				solve(i);
				known[i] = 'Y';
				break;
			}
		}
	}
	for (int i = 0; i < cnts; i++) {
		if (known[i] == '?') {
			solve2(i);
		}
	}
	for (int i = 0; i < szs; i++) {
		if (can[i].empty()) {
			printf("INCONSISTENT");
			exit(0);
		}
	}
	string ret;
	for (int i = 0; i < cnts; i++)
		ret += known[i];
	cout << ret;
	return 0;
}

// SUBMISSION CODE

#include <bits/stdc++.h>
#include <complex>

using namespace std;
typedef long long int ll;

const double PI = acos(-1);
const int N = 50 + 10, MOD = 1e9 + 7, LOG = 21;

int n, szs, szp, cnts;
vector<string> p, s;
vector<vector<int> > can;
char c[N];
char known[N];
string ss;

class NSegmentDisplay {
public:
	void solve(int ind) {
		for (int i = 0; i < s.size(); i++) {
			for (int j = 0; j < can[i].size(); j++) {
				if (s[i][ind] != p[can[i][j]][ind]) {
					can[i].erase(can[i].begin() + j);
					j--;
				}
			}
		}
	}

	void solve2(int ind) {
		for (int i = 0; i < s.size(); i++) {
			bool all = true;
			for (int j = 0; j < can[i].size(); j++) {
				if (p[can[i][j]][ind] == '0') {
					all = false;
					break;
				}
			}
			if (all) {
				known[ind] = 'N';
				return;
			}
		}
	}
	string brokenSegments(vector<string> A, vector<string> B) {
		memset(known, '?', sizeof(known));
		p = A;
		szp = p.size();
		s = B;
		szs = s.size();
		can.resize(szs);
		for (int i = 0; i < szs; i++) {
			for (int j = 0; j < szp; j++)
				can[i].push_back(j);
		}
		cnts = s[0].size();
		for (int i = 0; i < cnts; i++) {
			for (int j = 0; j < s.size(); j++) {
				if (s[j][i] == '1') {
					solve(i);
					known[i] = 'Y';
					break;
				}
			}
		}
		for (int i = 0; i < cnts; i++) {
			if (known[i] == '?') {
				solve2(i);
			}
		}
		for (int i = 0; i < szs; i++) {
			if (can[i].empty()) {
				return "INCONSISTENT";
			}
		}
		string ret;
		for (int i = 0; i < cnts; i++)
			ret += known[i];
		return ret;
	}
};

