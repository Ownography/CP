/* This problem can be solved using DP, where the states are row (1-100), and mask, the mask is in base 3 (3 states) 3^8 states,
   state 0 -> the above node is colored and has an even number of even neighbors that are colored.
   state 1 -> the above node is colored and has an odd number of even neighbors that are colored.
   state 2 -> the above node is not colored.
 */

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int N = 1e5 + 10, MOD = 1e9 + 7, LOG = 21;

int dp[101][6562], n, m;
int st[9];
vector<int> temp, stg;
vector<vector<int> > vg;
vector<vector<int> > mskToMsks;
vector<int> msks;

int calc(int, int);

void generate(int msk) {
	stg.resize(m + 1);
	for (int i = 0; i < m; i++) {
		int state = msk % 3;
		msk /= 3;
		stg[i] = state;
	}
}

void cr(int at, vector<int> cur) {
	if (at == m) {
		vg.push_back(cur);
		return;
	}
	if (stg[at] == 0) {
		cur.push_back(0);
		cr(at + 1, cur);
	} else if (stg[at] == 1) {
		cur.push_back(1);
		cr(at + 1, cur);
	} else {
		cur.push_back(0);
		cr(at + 1, cur);
		cur.pop_back();
		cur.push_back(1);
		cr(at + 1, cur);
	}
}

bool check(int m) {
	while (m) {
		int r = m % 3;
		if (r == 1)
			return false;
		m /= 3;
	}
	return true;
}

int solve(int ind, int msk) {
	if (ind == n) {
		if (!check(msk)) {
			return 0;
		}
		return 1;
	}
	int res = 0;
	for (int i = 0; i < mskToMsks[msk].size(); i++) {
		res += calc(ind + 1, mskToMsks[msk][i]);
		res %= MOD;
	}
	return res;
}

int calc(int ind, int msk) {
	int &ret = dp[ind][msk];
	if (ret != -1)
		return ret;
	return ret = solve(ind, msk);
}

int main() {
	memset(dp, -1, sizeof(dp));
	scanf("%d%d", &n, &m);
	mskToMsks.resize(6565);
	for (int i = 0; i < 6562; i++) {
		generate(i);
		vg.clear();
		temp.clear();
		cr(0, temp);
		for (int j = 0; j < vg.size(); j++) {
			int nm = 0;
			for (int k = 0; k < m; k++) {
				int cur = 0;
				if (vg[j][k] == 0) {
					nm += 2 * pow(3, k);
					continue;
				}
				if (k != 0) {
					if (vg[j][k - 1] == 1)
						cur++;
				}
				if (k != m - 1) {
					if (vg[j][k + 1] == 1)
						cur++;
				}
				if (stg[k] != 2)
					cur++;
				if (cur & 1)
					nm += pow(3, k);
			}
			mskToMsks[i].push_back(nm);
		}
	}
	int num = 0;
	for (int i = 0; i < m; i++)
		num += pow(3, i) * 2;
	cout << calc(0, num);
	return 0;
}


//TOPCODER SUBMISSION!!!

#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int N = 1e5 + 10, MOD = 1e9 + 7, LOG = 21;

int dp[101][6562], n, m;
int st[9];
vector<int> temp, stg;
vector<vector<int> > vg;
vector<vector<int> > mskToMsks;
vector<int> msks;

class DengklekPaintingSquares {
public:
	int numSolutions(int N, int M) {
		n = N, m = M;
		memset(dp, -1, sizeof(dp));
		mskToMsks.resize(6565);
		for (int i = 0; i < 6562; i++) {
			generate(i);
			vg.clear();
			temp.clear();
			cr(0, temp);
			for (int j = 0; j < vg.size(); j++) {
				int nm = 0;
				for (int k = 0; k < m; k++) {
					int cur = 0;
					if (vg[j][k] == 0) {
						nm += 2 * pow(3, k);
						continue;
					}
					if (k != 0) {
						if (vg[j][k - 1] == 1)
							cur++;
					}
					if (k != m - 1) {
						if (vg[j][k + 1] == 1)
							cur++;
					}
					if (stg[k] != 2)
						cur++;
					if (cur & 1)
						nm += pow(3, k);
				}
				mskToMsks[i].push_back(nm);
			}
		}
		int num = 0;
		for (int i = 0; i < m; i++)
			num += pow(3, i) * 2;
		return calc(0, num);
	}

	bool check(int m) {
		while (m) {
			int r = m % 3;
			if (r == 1)
				return false;
			m /= 3;
		}
		return true;
	}

	void generate(int msk) {
		stg.resize(m + 1);
		for (int i = 0; i < m; i++) {
			int state = msk % 3;
			msk /= 3;
			stg[i] = state;
		}
	}

	void cr(int at, vector<int> cur) {
		if (at == m) {
			vg.push_back(cur);
			return;
		}
		if (stg[at] == 0) {
			cur.push_back(0);
			cr(at + 1, cur);
		} else if (stg[at] == 1) {
			cur.push_back(1);
			cr(at + 1, cur);
		} else {
			cur.push_back(0);
			cr(at + 1, cur);
			cur.pop_back();
			cur.push_back(1);
			cr(at + 1, cur);
		}
	}

	int solve(int ind, int msk) {
		if (ind == n) {
			if (!check(msk)) {
				return 0;
			}
			return 1;
		}
		int res = 0;
		for (int i = 0; i < mskToMsks[msk].size(); i++) {
			res += calc(ind + 1, mskToMsks[msk][i]);
			res %= MOD;
		}
		return res;
	}

	int calc(int ind, int msk) {
		int &ret = dp[ind][msk];
		if (ret != -1)
			return ret;
		return ret = solve(ind, msk);
	}
};
